===== ./add-language.sh =====
#!/bin/bash

# üìÇ Localise le fichier hugo.toml
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
CONFIG_FILE="$PROJECT_DIR/hugo.toml"

if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå Fichier hugo.toml introuvable dans $PROJECT_DIR"
  exit 1
fi

# üî§ Demande les langues avec nettoyage des inputs
read -p "Code langue principale (ex: fr) : " lang1
read -p "Nom affich√© (ex: Fran√ßais) pour $lang1 : " name1
read -p "Poids (ordre d'affichage, ex: 1) pour $lang1 : " weight1
weight1=$(echo "$weight1" | tr -cd '[:digit:]')

read -p "Code langue secondaire (ex: en) : " lang2
read -p "Nom affich√© (ex: English) pour $lang2 : " name2
read -p "Poids (ordre d'affichage, ex: 2) pour $lang2 : " weight2
weight2=$(echo "$weight2" | tr -cd '[:digit:]')

if [[ -z "$weight1" || -z "$weight2" ]]; then
  echo "‚ùå Les poids doivent √™tre des nombres entiers."
  exit 1
fi

# ‚úÖ Fonction pour ajouter une langue si elle n'existe pas
add_lang_block() {
  local lang="$1"
  local name="$2"
  local weight="$3"

  if grep -q "^\[languages\.$lang\]" "$CONFIG_FILE"; then
    echo "‚ö†Ô∏è La langue '$lang' existe d√©j√†, rien √† faire."
  else
    echo -e "\n[languages.$lang]" >> "$CONFIG_FILE"
    echo "languageName = \"$name\"" >> "$CONFIG_FILE"
    echo "contentDir = \"content/$lang\"" >> "$CONFIG_FILE"
    echo "weight = $weight" >> "$CONFIG_FILE"
    echo "[languages.$lang.params]" >> "$CONFIG_FILE"
    echo "  displayName = \"$name\"" >> "$CONFIG_FILE"
    echo "[languages.$lang.menus]" >> "$CONFIG_FILE"
    echo "  [[languages.$lang.menus.main]]" >> "$CONFIG_FILE"
    echo "    name = \"Home\"" >> "$CONFIG_FILE"
    echo "    pageRef = \"/\"" >> "$CONFIG_FILE"
    echo "    weight = 1" >> "$CONFIG_FILE"
    echo "  [[languages.$lang.menus.main]]" >> "$CONFIG_FILE"
    echo "    name = \"Posts\"" >> "$CONFIG_FILE"
    echo "    pageRef = \"/posts/\"" >> "$CONFIG_FILE"
    echo "    weight = 2" >> "$CONFIG_FILE"
    echo "‚úÖ Langue '$lang' ajout√©e."
  fi
}

# üõ†Ô∏è Ajoute defaultContentLanguage si absent
if ! grep -q "^defaultContentLanguage" "$CONFIG_FILE"; then
  echo -e "\ndefaultContentLanguage = \"$lang1\"" >> "$CONFIG_FILE"
  echo "‚úÖ defaultContentLanguage = \"$lang1\" ajout√©."
fi

# üîÅ Ajout des langues
add_lang_block "$lang1" "$name1" "$weight1"
add_lang_block "$lang2" "$name2" "$weight2"

echo -e "\nüéâ Termin√©."


===== ./add-languages-multiple.sh =====
#!/bin/bash

# üìÇ Chemins
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
CONFIG_FILE="$PROJECT_DIR/hugo.toml"
CONTENT_DIR="$PROJECT_DIR/content"
TMP_FILE="$PROJECT_DIR/hugo_tmp.toml"

# üìú Langues RTL connues
RTL_LANGS=("ar" "fa" "he" "ur" "ps" "syr" "dv")

# üß™ V√©rif
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå Fichier introuvable : $CONFIG_FILE"
  exit 1
fi

# üåê Langue par d√©faut
read -p "Langue par d√©faut (ex: fr) : " default_lang
# Supprime l'ancienne ligne si elle existe
grep -v '^defaultContentLanguage' "$CONFIG_FILE" > "$TMP_FILE"
echo "defaultContentLanguage = \"$default_lang\"" >> "$TMP_FILE"

# Nettoie tous les anciens blocs [languages.xx]
awk '
  BEGIN { skip=0 }
  /^\[languages\.[a-z]{2,3}\]/ { skip=1; next }
  /^\[languages\..*\]/ { skip=1; next }
  /^\[.*\]/ { skip=0 }
  skip==0 { print }
' "$TMP_FILE" > "$CONFIG_FILE"

echo "‚úÖ defaultContentLanguage = \"$default_lang\" d√©fini et anciens blocs nettoy√©s."

# üîÅ Ajout de plusieurs langues
while true; do
  echo ""
  read -p "Code langue (ex: en), ENTER pour arr√™ter : " lang
  [[ -z "$lang" ]] && break

  read -p "Nom affich√© pour $lang : " name
  read -p "Poids (ordre dans menu) : " weight

  # RTL ?
  is_rtl=false
  for rtl_lang in "${RTL_LANGS[@]}"; do
    [[ "$lang" == "$rtl_lang" ]] && is_rtl=true && break
  done

  # Ajout du bloc dans hugo.toml
  {
    echo ""
    echo "[languages.$lang]"
    echo "languageName = \"$name\""
    echo "contentDir = \"content/$lang\""
    echo "weight = $weight"
    echo "[languages.$lang.params]"
    echo "  displayName = \"$name\""
    [[ "$is_rtl" == true ]] && echo "  rtl = true"
    echo "[languages.$lang.menus]"
    echo "  [[languages.$lang.menus.main]]"
    echo "    name = \"Home\""
    echo "    pageRef = \"/\""
    echo "    weight = 1"
    echo "  [[languages.$lang.menus.main]]"
    echo "    name = \"Posts\""
    echo "    pageRef = \"/posts/\""
    echo "    weight = 2"
  } >> "$CONFIG_FILE"

  echo "‚úÖ Langue '$lang' ajout√©e avec${is_rtl:+ RTL}."

  # üìÅ Cr√©ation du dossier content/lang + _index.md
  LANG_DIR="$CONTENT_DIR/$lang"
  INDEX_FILE="$LANG_DIR/_index.md"
  mkdir -p "$LANG_DIR"
  if [[ ! -f "$INDEX_FILE" ]]; then
    echo -e "---\ntitle: \"Accueil\"\n---\n\n{{< slogan >}}" > "$INDEX_FILE"
    echo "üìÑ _index.md cr√©√© dans $LANG_DIR"
  fi
done

echo ""
echo "üéâ Toutes les langues sont configur√©es dans hugo.toml et content/."


===== ./generate-lang-content.sh =====
#!/bin/bash

# üìç Chemins
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_DIR"

config_file="$PROJECT_DIR/hugo.toml"
article_name="bienvenue.md"

# üåê Traductions de "Bonjour Wil, tu as r√©ussi."
declare -A messages
messages[fr]="Bonjour Wil, tu as r√©ussi."
messages[en]="Hello Wil, you made it."
messages[es]="Hola Wil, lo lograste."
messages[de]="Hallo Wil, du hast es geschafft."
messages[it]="Ciao Wil, ce l'hai fatta."
messages[pt]="Ol√° Wil, voc√™ conseguiu."
messages[ar]="ŸÖÿ±ÿ≠ÿ®ÿß ŸàŸäŸÑÿå ŸÑŸÇÿØ ŸÜÿ¨ÿ≠ÿ™."
messages[fa]="ÿ≥ŸÑÿßŸÖ Ÿà€åŸÑÿå ŸÖŸàŸÅŸÇ ÿ¥ÿØ€å."
messages[he]="◊©◊ú◊ï◊ù ◊ï◊ô◊ú, ◊î◊¶◊ú◊ó◊™."
messages[ja]="„Åì„Çì„Å´„Å°„ÅØWil„ÄÅÊàêÂäü„Åó„Åæ„Åó„Åü„ÄÇ"
messages[zh]="‰Ω†Â•ΩWilÔºå‰Ω†ÊàêÂäü‰∫Ü„ÄÇ"
messages[ru]="–ü—Ä–∏–≤–µ—Ç –£–∏–ª, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è."
messages[tr]="Merhaba Wil, ba≈üardƒ±n."
messages[nl]="Hallo Wil, je bent geslaagd."

# üîé R√©cup√©ration des langues depuis hugo.toml
LANGS=$(grep -Po '^\s*\[languages\.\K[a-z]{2,3}(?=\])' "$config_file" | sort -u)

echo "üåê Langues d√©tect√©es dans hugo.toml : $LANGS"
echo

# üìù Cr√©ation des fichiers
for lang in $LANGS; do
  filepath="content/$lang/$article_name"
  message="${messages[$lang]}"

  # Utilise l'anglais par d√©faut si la langue est absente
  if [ -z "$message" ]; then
    message="Hello Wil, you made it. ([$lang])"
  fi

  if [ ! -f "$filepath" ]; then
    mkdir -p "$(dirname "$filepath")"
    cat > "$filepath" <<EOF
---
title: "Bienvenue (${lang})"
date: $(date -Iseconds)
draft: false
---

$message
EOF
    echo "‚úÖ Cr√©√© : $filepath"
  else
    echo "‚ö†Ô∏è Existe d√©j√† : $filepath"
  fi
done

echo
echo "üèÅ Tous les fichiers sont pr√™ts üéâ"


===== ./generate-test-articles.sh =====
#!/bin/bash

# üìç R√©pertoire du projet Hugo
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_DIR"

config_file="hugo.toml"
article_name="mon-test.md"

# üåê Traductions de base
declare -A messages
messages[fr]="Bonjour Wil, tu as r√©ussi."
messages[en]="Hello Wil, you made it."
messages[es]="Hola Wil, lo lograste."
messages[de]="Hallo Wil, du hast es geschafft."
messages[it]="Ciao Wil, ce l'hai fatta."
messages[pt]="Ol√° Wil, voc√™ conseguiu."
messages[ar]="ŸÖÿ±ÿ≠ÿ®ÿß ŸàŸäŸÑÿå ŸÑŸÇÿØ ŸÜÿ¨ÿ≠ÿ™."
messages[fa]="ÿ≥ŸÑÿßŸÖ Ÿà€åŸÑÿå ŸÖŸàŸÅŸÇ ÿ¥ÿØ€å."
messages[he]="◊©◊ú◊ï◊ù ◊ï◊ô◊ú, ◊î◊¶◊ú◊ó◊™."
messages[ja]="„Åì„Çì„Å´„Å°„ÅØWil„ÄÅÊàêÂäü„Åó„Åæ„Åó„Åü„ÄÇ"
messages[zh]="‰Ω†Â•ΩWilÔºå‰Ω†ÊàêÂäü‰∫Ü„ÄÇ"
messages[ru]="–ü—Ä–∏–≤–µ—Ç –£–∏–ª, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è."
messages[tr]="Merhaba Wil, ba≈üardƒ±n."
messages[nl]="Hallo Wil, je bent geslaagd."

# üîç Extraction des langues depuis hugo.toml
LANGS=$(grep -oP '\[languages\.\K[a-z]{2}(-[a-z]{2})?' "$config_file")

echo "üåç Langues d√©tect√©es dans hugo.toml : $LANGS"
echo

for lang in $LANGS; do
  folder="content/$lang/posts"
  filepath="$folder/$article_name"
  message="${messages[$lang]}"

  # Fallback si pas de traduction
  if [ -z "$message" ]; then
    message="Hello Wil, you made it. ([$lang])"
  fi

  # Cr√©e le _index.md si absent
  index_file="$folder/_index.md"
  if [ ! -f "$index_file" ]; then
    mkdir -p "$folder"
    echo -e "---\ntitle: \"Articles\"\nlayout: list\n---" > "$index_file"
    echo "‚úÖ _index.md cr√©√© : $index_file"
  fi

  # Cr√©e l'article s'il n'existe pas
  if [ ! -f "$filepath" ]; then
    mkdir -p "$folder"
    cat > "$filepath" <<EOF
---
title: "Mon Test (${lang})"
date: $(date -Iseconds)
draft: false
---

$message
EOF
    echo "‚úÖ Article g√©n√©r√© : $filepath"
  else
    echo "‚ö†Ô∏è Article d√©j√† pr√©sent : $filepath"
  fi
done

echo
echo "üèÅ Tous les fichiers sont pr√™ts √† s'afficher dans /<lang>/posts/"


===== ./set-language-multi.sh =====
#!/bin/bash

# üìç Positionne les chemins du projet
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
config_file="$PROJECT_DIR/hugo.toml"
tmp_file="$PROJECT_DIR/hugo_tmp.toml"

# üìé V√©rifie que le fichier de configuration existe
if [ ! -f "$config_file" ]; then
  echo "‚ùå Fichier introuvable : $config_file"
  exit 1
fi

# üßπ Nettoie l'ancien config.toml (en retirant les anciens blocs multilingues)
grep -v 'defaultContentLanguage' "$config_file" \
  | grep -v '^\[languages' \
  | grep -v '^  \[languages\.' \
  > "$tmp_file"

# ‚úèÔ∏è Ajoute la nouvelle configuration multilingue
cat >> "$tmp_file" <<'EOL'

defaultContentLanguage = "fr"

[languages]

  [languages.fr]
    languageName = "Fran√ßais"
    contentDir = "content/fr"
    weight = 1
    [languages.fr.params]
      displayName = "Fran√ßais"
    [languages.fr.menus]
      [[languages.fr.menus.main]]
        name = "Accueil"
        pageRef = "/"
        weight = 1
      [[languages.fr.menus.main]]
        name = "Articles"
        pageRef = "/posts/"
        weight = 2

  [languages.es]
    languageName = "Espa√±ol"
    contentDir = "content/es"
    weight = 2
    [languages.es.params]
      displayName = "Espa√±ol"
    [languages.es.menus]
      [[languages.es.menus.main]]
        name = "Inicio"
        pageRef = "/"
        weight = 1
      [[languages.es.menus.main]]
        name = "Art√≠culos"
        pageRef = "/posts/"
        weight = 2

  [languages.he]
    languageName = "◊¢◊ë◊®◊ô◊™"
    contentDir = "content/he"
    weight = 3
    [languages.he.params]
      displayName = "◊¢◊ë◊®◊ô◊™"
      rtl = true
    [languages.he.menus]
      [[languages.he.menus.main]]
        name = "◊ì◊£ ◊î◊ë◊ô◊™"
        pageRef = "/"
        weight = 1
      [[languages.he.menus.main]]
        name = "◊û◊ê◊û◊®◊ô◊ù"
        pageRef = "/posts/"
        weight = 2

  [languages.ar]
    languageName = "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"
    contentDir = "content/ar"
    weight = 4
    [languages.ar.params]
      displayName = "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"
      rtl = true
    [languages.ar.menus]
      [[languages.ar.menus.main]]
        name = "ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©"
        pageRef = "/"
        weight = 1
      [[languages.ar.menus.main]]
        name = "ŸÖŸÇÿßŸÑÿßÿ™"
        pageRef = "/posts/"
        weight = 2

  [languages.fa]
    languageName = "ŸÅÿßÿ±ÿ≥€å"
    contentDir = "content/fa"
    weight = 5
    [languages.fa.params]
      displayName = "ŸÅÿßÿ±ÿ≥€å"
      rtl = true
    [languages.fa.menus]
      [[languages.fa.menus.main]]
        name = "ÿÆÿßŸÜŸá"
        pageRef = "/"
        weight = 1
      [[languages.fa.menus.main]]
        name = "ŸÖŸÇÿßŸÑÿßÿ™"
        pageRef = "/posts/"
        weight = 2
EOL

# üíæ Remplace le fichier hugo.toml par le nouveau
mv "$tmp_file" "$config_file"

echo "‚úÖ Fichier hugo.toml mis √† jour avec menus, displayName et param√®tres multilingues complets."


===== ./set-language.sh =====
#!/bin/bash

# üìÇ Localise le fichier hugo.toml
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
CONFIG_FILE="$PROJECT_DIR/hugo.toml"

if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå Fichier hugo.toml introuvable dans $PROJECT_DIR"
  exit 1
fi

# üî§ Demande les langues
read -p "Code langue principale (ex: fr) : " lang1
read -p "Nom affich√© (ex: Fran√ßais) pour $lang1 : " name1
read -p "Poids (ordre d'affichage, ex: 1) pour $lang1 : " weight1

read -p "Code langue secondaire (ex: en) : " lang2
read -p "Nom affich√© (ex: English) pour $lang2 : " name2
read -p "Poids (ordre d'affichage, ex: 2) pour $lang2 : " weight2

# ‚úÖ Fonction pour ajouter une langue si elle n'existe pas
add_lang_block() {
  local lang="$1"
  local name="$2"
  local weight="$3"

  if grep -q "^\[languages\.$lang\]" "$CONFIG_FILE"; then
    echo "‚ö†Ô∏è La langue '$lang' existe d√©j√†, rien √† faire."
  else
    echo -e "\n[languages.$lang]" >> "$CONFIG_FILE"
    echo "languageName = \"$name\"" >> "$CONFIG_FILE"
    echo "contentDir = \"content/$lang\"" >> "$CONFIG_FILE"
    echo "weight = $weight" >> "$CONFIG_FILE"
    echo "‚úÖ Langue '$lang' ajout√©e."
  fi
}

# üõ†Ô∏è Ajoute defaultContentLanguage si absent
if ! grep -q "^defaultContentLanguage" "$CONFIG_FILE"; then
  echo -e "\ndefaultContentLanguage = \"$lang1\"" >> "$CONFIG_FILE"
  echo "‚úÖ defaultContentLanguage = \"$lang1\" ajout√©."
fi

# üîÅ Ajout des langues
add_lang_block "$lang1" "$name1" "$weight1"
add_lang_block "$lang2" "$name2" "$weight2"

echo "üéâ Termin√©."


===== ./setup-multilang.sh =====
#!/bin/bash

# üìç R√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_DIR"

# 1. D√©finir les langues dans hugo.toml
echo "üîß √âtape 1 : Configuration multilingue"
"$SCRIPT_DIR/set-language-multi.sh" || { echo "‚ùå Erreur set-language-multi.sh"; exit 1; }

# 2. G√©n√©rer les fichiers bienvenue.md
echo "üìù √âtape 2 : G√©n√©ration des messages de bienvenue"
"$SCRIPT_DIR/generate-lang-content.sh" || { echo "‚ùå Erreur generate-lang-content.sh"; exit 1; }

# 3. G√©n√©rer les articles de test
echo "üì∞ √âtape 3 : G√©n√©ration des articles de test"
"$SCRIPT_DIR/generate-test-articles.sh" || { echo "‚ùå Erreur generate-test-articles.sh"; exit 1; }

echo ""
echo "‚úÖ Setup termin√©. Lance 'hugo server -D' pour tester ton site."


